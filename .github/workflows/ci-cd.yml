name: CI/CD Pipeline
on:
  push:
    branches: [main]
jobs:
  build:
    runs-on: ubuntu-latest
    
      
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Install Dependencies
        run: npm install

      - name: Debug Secrets
        run: |
          echo "DOCKERHUB_USERNAME is set: $([ -z "${{ secrets.DOCKERHUB_USERNAME }}" ] && echo 'no' || echo 'yes')"
          echo "DOCKERHUB_TOKEN is set: $([ -z "${{ secrets.DOCKERHUB_TOKEN }}" ] && echo 'no' || echo 'yes')"
          echo "DB_URL is set: $([ -z "${{ secrets.DB_URL }}" ] && echo 'no' || echo 'yes')"
          echo "PORT is set: $([ -z "${{ secrets.PORT }}" ] && echo 'no' || echo 'yes')"
          echo "DIRECT_URL is set: $([ -z "${{ secrets.DIRECT_URL }}" ] && echo 'no' || echo 'yes')"
        
        # Step 4: Check required secrets---
      - name: Check required secrets
        run: |
          if [ -z "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
            echo "Error: DOCKERHUB_USERNAME secret is missing!"
            exit 1
          fi
          if [ -z "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            echo "Error: DOCKERHUB_TOKEN secret is missing!"
            exit 1
          fi
          if [ -z "${{ secrets.DB_URL }}" ]; then
            echo "Error: DB_URL secret is missing!"
            exit 1
          fi
          if [ -z "${{ secrets.PORT }}" ]; then
            echo "Error: PORT secret is missing!"
            exit 1
          fi


      - name: Generate Prisma Client
        run: npx prisma generate
        env:
          DB_URL: ${{ secrets.DB_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}

        # üê≥ Step 5: Log in to Docker Hub
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      # üèóÔ∏è Step 6: Build Docker image
      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/type-node:latest .

      # üì§ Step 7: Push Docker image to Docker Hub
      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/type-node:latest


        # üß™ Step 8: Test container locally on GitHub runner
      - name: Run Docker Container (Optional Test)
        run: |
          docker run -d -p ${{ secrets.PORT }}:${{ secrets.PORT }} --name ci-cd-test ${{ secrets.DOCKERHUB_USERNAME }}/type-node:latest
          sleep 5
          docker ps

        # üöÄ Step 8: Deploy to remote server via SSH
      # - name: Deploy to Server
        # uses: appleboy/ssh-action@v1.0.0
        # with:
        #   host: ${{ secrets.SERVER_IP }}
        #   username: ${{ secrets.SERVER_USER }}
        #   key: ${{ secrets.SERVER_SSH_KEY }}
        #   script: |
        #     echo "üîÑ Pulling latest Docker image..."
        #     docker pull ${{ secrets.DOCKERHUB_USERNAME }}/type-node:latest

        #     echo "üõë Stopping old container if exists..."
        #     docker stop type-node || true
        #     docker rm type-node || true

        #     echo "üöÄ Starting new container..."
        #     docker run -d \
        #       --name type-node \
        #       -p 3000:3000 \
        #       -e DB_URL=${{ secrets.DB_URL }} \
        #       -e DIRECT_URL=${{ secrets.DIRECT_URL }} \
        #       -e PORT=${{ secrets.PORT }} \
        #       ${{ secrets.DOCKERHUB_USERNAME }}/type-node:latest

        #     echo "‚úÖ Deployment completed successfully!"

        
